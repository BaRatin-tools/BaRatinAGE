name: Build App

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (format v*)"
        required: true

jobs:
  build:
    runs-on: windows-latest
    env:
      NAME: BaRatinAGE
      OUT_DIR: out
      ICON_PATH: resources/icons/icon.ico
      EXT_EXE_DIR: exe
      EXAMPLES_DIR: examples
      DIRS_TO_CREATE: "log exe/bam_workspace"
      DIRS_TO_COPY: "resources/fonts resources/i18n resources/icons example"
      FILES_TO_COPY: "resources/credits.csv resources/baratin_qfh_presets.json"
      VERSION: ${{ github.event.inputs.version }}
      OS: Windows

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21

      - name: Derive other environment variables
        shell: pwsh
        run: |
          echo "VERSION_NUMBER=$($env:VERSION.Substring(1))" >> $env:GITHUB_ENV

      - name: Set version in pom.xml
        shell: pwsh
        run: mvn versions:set -DnewVersion="${{ env.VERSION_NUMBER }}"

      - name: Build JAR
        shell: pwsh
        run: mvn clean package

      - name: Package app with jpackage
        shell: pwsh
        run: >
          jpackage --type app-image
          --app-version ${{ env.VERSION_NUMBER }}
          --name ${{ env.NAME }}
          --dest ${{ env.OUT_DIR }}
          --input target
          --main-jar ${{ env.NAME }}-${{ env.VERSION_NUMBER }}.jar
          --icon ${{ env.ICON_PATH }}

      - name: Create required directories and copy required files
        shell: pwsh
        run: |
          $appDir = Join-Path "${{ env.OUT_DIR }}" "${{ env.NAME }}"
          foreach ($d in $env:DIRS_TO_CREATE.Split(" ")) {
            New-Item -ItemType Directory -Force -Path (Join-Path $appDir $d) | Out-Null
          }
          New-Item -ItemType Directory -Force -Path (Join-Path $appDir $env:EXT_EXE_DIR) | Out-Null
          foreach ($d in $env:DIRS_TO_COPY.Split(" ")) {
            Copy-item -Force -Recurse $d -Destination (Join-Path $appDir $d)
          }
          foreach ($d in $env:FILES_TO_COPY.Split(" ")) {
            Copy-item -Force $d -Destination (Join-Path $appDir $d)
          }

      - name: Download latest example project files
        shell: bash # necessary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=$(gh release list --repo ${{ github.repository }} --limit 100 \
            --json tagName,isPrerelease \
            --jq '.[] | select(.isPrerelease and (.tagName | startswith("examples-"))) 
                  | .tagName' \
            | sort -Vr | head -n1)

          echo "Using release tag: $tag"

          gh release download "$tag" \
            --repo ${{ github.repository }} \
            --pattern "*.bam"

          dest="${{ env.OUT_DIR }}/${{ env.NAME }}/${{ env.EXAMPLES_DIR }}"
            mkdir -p "$dest"
            mv *.bam "$dest"/

      - name: Download BaM executable from latest release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download --repo BaM-tools/BaM --pattern "BaM-*_${{ env.OS }}.zip" --dir .
          $zipPath = Get-ChildItem -Filter "BaM-*_${{ env.OS }}.zip" | Select-Object -First 1
          Expand-Archive $zipPath.FullName -DestinationPath (Join-Path "${{ env.OUT_DIR }}" "${{ env.NAME }}" "${{ env.EXT_EXE_DIR }}") -Force

      - name: Download distribution CLI executable from latest release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download --repo benRenard/BMSL --pattern "distribution-*_${{ env.OS }}.zip" --dir .
          $zipPath = Get-ChildItem -Filter "distribution-*_${{ env.OS }}.zip" | Select-Object -First 1
          Expand-Archive $zipPath.FullName -DestinationPath (Join-Path "${{ env.OUT_DIR }}" "${{ env.NAME }}" "${{ env.EXT_EXE_DIR }}") -Force

      - name: Zip packaged app
        shell: pwsh
        run: |
          $zipFile = "${{ env.NAME }}-${{ env.VERSION }}_${{ env.OS }}.zip"
          Compress-Archive -Path (Join-Path $env:OUT_DIR $env:NAME) -DestinationPath $zipFile -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}-${{ env.VERSION }}_${{ env.OS }}
          path: ${{ env.OUT_DIR }}/${{ env.NAME }}
